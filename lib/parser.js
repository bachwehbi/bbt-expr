/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction  = peg$parsestart,

      peg$c0 = function(c_condition) { return c_condition; },
      peg$c1 = function(Additive) {return Additive;},
      peg$c2 = function(left, exp) {return exp;},
      peg$c3 = function(left, right) {
          if (right) {
            return bbtCondition.createExpressionOrValue({
              left: left,
              right: right,
              oper: types.OPERATORS.BBT_OR
            })
          } else {
            return left;
          }
        },
      peg$c4 = function(left, exp) {return exp},
      peg$c5 = function(left, right) {
          if (right) {
            return bbtCondition.createExpressionOrValue({
              left: left,
              right: right,
              oper: types.OPERATORS.BBT_AND
            })
          } else {
            return left
          }
        },
      peg$c6 = "(",
      peg$c7 = peg$literalExpectation("(", false),
      peg$c8 = ")",
      peg$c9 = peg$literalExpectation(")", false),
      peg$c10 = function(exp) {
          return exp;
        },
      peg$c11 = function(atom) {
          return bbtCondition.createExpressionOrValue({
            left: atom,
            oper: types.OPERATORS.BBT_NOT
          })
        },
      peg$c12 = function(Comparison) {
          return Comparison;
        },
      peg$c13 = "==",
      peg$c14 = peg$literalExpectation("==", false),
      peg$c15 = function() {return types.OPERATORS.BBT_EQ},
      peg$c16 = "!=",
      peg$c17 = peg$literalExpectation("!=", false),
      peg$c18 = function() {return types.OPERATORS.BBT_NEQ},
      peg$c19 = ">",
      peg$c20 = peg$literalExpectation(">", false),
      peg$c21 = function() {return types.OPERATORS.BBT_GT},
      peg$c22 = ">=",
      peg$c23 = peg$literalExpectation(">=", false),
      peg$c24 = function() {return types.OPERATORS.BBT_GTE},
      peg$c25 = "<",
      peg$c26 = peg$literalExpectation("<", false),
      peg$c27 = function() {return types.OPERATORS.BBT_LT},
      peg$c28 = "<=",
      peg$c29 = peg$literalExpectation("<=", false),
      peg$c30 = function() {return types.OPERATORS.BBT_LTQ},
      peg$c31 = function(left, oper, right) {
          return bbtCondition.createExpressionOrValue({
            left: left,
            right: right,
            oper: oper
          })
        },
      peg$c32 = "+",
      peg$c33 = peg$literalExpectation("+", false),
      peg$c34 = function() {return types.OPERATORS.BBT_ADD},
      peg$c35 = "-",
      peg$c36 = peg$literalExpectation("-", false),
      peg$c37 = function() {return types.OPERATORS.BBT_SUB},
      peg$c38 = function(head, tail) {
          return tail.reduce(function(result, element) {
            return bbtCondition.createExpressionOrValue({
              left: result,
              right: element[3],
              oper: element[1]
            })
          }, head)
        },
      peg$c39 = "*",
      peg$c40 = peg$literalExpectation("*", false),
      peg$c41 = function() { return types.OPERATORS.BBT_MULT },
      peg$c42 = "/",
      peg$c43 = peg$literalExpectation("/", false),
      peg$c44 = function() { return types.OPERATORS.BBT_DIV },
      peg$c45 = "idiv",
      peg$c46 = peg$literalExpectation("idiv", false),
      peg$c47 = function() { return types.OPERATORS.BBT_IDIV },
      peg$c48 = "%",
      peg$c49 = peg$literalExpectation("%", false),
      peg$c50 = function() { return types.OPERATORS.BBT_MOD },
      peg$c51 = function(value, keys) {
          if (value.keys) {
            value.keys.concat(keys)
          } else {
            value.keys = keys;
          }

          return value;
        },
      peg$c52 = function(Additive) {
          return Additive
        },
      peg$c53 = function(primitive) {
          return new bbtCondition.Value({
            val: primitive
          })
        },
      peg$c54 = function(constructor) {return constructor;},
      peg$c55 = function(trigger) {return new bbtCondition.TriggerValue()},
      peg$c56 = function(resource) {
          return new bbtCondition.ResourceValue(resource);
        },
      peg$c57 = function(fct) {
          return new bbtCondition.FunctionValue(fct)
        },
      peg$c58 = function(params) {
            return {
              fct: function() {
                return String.prototype.concat.apply("", arguments)
              },
              params: params
            };
          },
      peg$c59 = function(params) {
            if (params.length < 2 || params.length > 3) {
              throw 'Arguments error: substring accepts 2 or 3 arguments';
            }
            return {
              fct: function(s, indexStart, indexEnd) {
                return String.prototype.substring.apply(s, [indexStart, indexEnd])
              },
              params: params
            };
          },
      peg$c60 = function(params) {
            if (params.length != 2) {
              throw 'Arguments error: startsWith takes exactly 2 arguments';
            }
            return {
              fct: function(str, prefix) {
                return str.startsWith(prefix)
              },
              params: params
            };
          },
      peg$c61 = function(params) {
            if (params.length != 2) {
              throw 'Arguments error: endsWith takes exactly 2 arguments';
            }
            return {
              fct: function(str, suffix) {
                return str.endsWith(suffix)
              },
              params: params
            };
          },
      peg$c62 = function(params) {
            if (params.length != 2) {
              throw 'Arguments error: endsWith takes exactly 2 arguments';
            }
            return {
              fct: function(str, lup) {
                return str.includes(lup)
              },
              params: params
            };
          },
      peg$c63 = function(params) {
            return {
              fct: mathjs.min,
              params: params
            };
          },
      peg$c64 = function(params) {
            return {
              fct: mathjs.max,
              params: params
            };
          },
      peg$c65 = function(params) {
            return {
              fct: mathjs.mean,
              params: params
            };
          },
      peg$c66 = function() {
            return {
              fct: mathjs.random
            };
          },
      peg$c67 = function(parameter) {
            return {
              fct: mathjs.ceil,
              params: [parameter]
            };
          },
      peg$c68 = function(parameter) {
            return {
              fct: mathjs.floor,
              params: [parameter]
            };
          },
      peg$c69 = function(parameter) {
            return {
              fct: mathjs.abs,
              params: [parameter]
            };
          },
      peg$c70 = function(parameter) {
            return {
              fct: mathjs.sqrt,
              params: [parameter]
            };
          },
      peg$c71 = function(params) {
            return {
              fct: mathjs.pow,
              params: params
            };
          },
      peg$c72 = function(params) {
            return {
              fct: mathjs.median,
              params: params
            };
          },
      peg$c73 = function(params) {
            return {
              fct: mathjs.sum,
              params: params
            };
          },
      peg$c74 = function(params) {
            return {
              fct: mathjs.std,
              params: params
            };
          },
      peg$c75 = function(params) {
            if (params.length != 2) {
              throw 'Arguments error: getDistance takes exactly 2 arguments';
            }
            return {
              fct: Geolib.prototype.getDistance,
              params: params
            };
          },
      peg$c76 = function(params) {
            if (params.length != 2) {
              throw 'Arguments error: isPointInside takes exactly 2 arguments';
            }
            return {
              fct: Geolib.prototype.isPointInside,
              params: params
            };
          },
      peg$c77 = function(params) {
            if (params.length != 3) {
              throw 'Arguments error: isPointInCircle takes exactly 3 arguments';
            }
            return {
              fct: Geolib.prototype.isPointInCircle,
              params: params
            };
          },
      peg$c78 = function(params) {
            if (params.length != 3) {
              throw 'Arguments error: isPointInLine takes exactly 3 arguments';
            }
            return {
              fct: Geolib.prototype.isPointInLine,
              params: params
            };
          },
      peg$c79 = function(params) {
            return {
              fct: Geolib.prototype.getCenter,
              params: params
            };
          },
      peg$c80 = function(params) {
            return {
              fct: Geolib.prototype.getPathLength,
              params: params
            };
          },
      peg$c81 = ".",
      peg$c82 = peg$literalExpectation(".", false),
      peg$c83 = function(channel, resource) {
            return {
              channel: channel,
              resource: resource,
              iscomplex: false
            }
          },
      peg$c84 = ",",
      peg$c85 = peg$literalExpectation(",", false),
      peg$c86 = function(channelparam, resourceparam) {
            return {
              channel: channelparam,
              resource: resourceparam,
              iscomplex: true
            }
          },
      peg$c87 = function(elem) {return elem;},
      peg$c88 = function(param, parameter) {return parameter;},
      peg$c89 = function(param, params) {
          if (params.length) {
            params.unshift(param);
            return params
          } else {
            return [param];
          }
        },
      peg$c90 = function(param) {return param;},
      peg$c91 = function(dateconstructor) {return dateconstructor;},
      peg$c92 = function(gps) {return gps;},
      peg$c93 = function(poly) {return poly;},
      peg$c94 = function(params) {
            return new bbtCondition.FunctionValue({
              fct: function() {
                var bound = moment.bind();
                var retval = bound.apply(undefined, arguments)
                console.log(retval.format())
                return retval
              },
              params: params
            });
          },
      peg$c95 = function(lat, lng) {
            return new bbtCondition.FunctionValue({
              fct: function(latitude, longitude) {
                return {latitude: latitude, longitude: longitude}
              },
              params: [lat, lng]
            });
            return
          },
      peg$c96 = function(parameter) {
            return new bbtCondition.FunctionValue({
              fct: function(param) {
                // we are expecting param to contain latitude and longitude
                if (!param.hasOwnProperty('latitude') || param.hasOwnProperty('longitude')) {
                  throw new Error('Expecting param to have latitude and longitude parameters')
                }

                return {latitude: param.latitude, longitude: param.longitude}
              },
              params: [parameter]
            });
            return
          },
      peg$c97 = function(p1, p2, point) {return point;},
      peg$c98 = function(p1, p2, points) {
          points.unshift(p1, p2)
          return new bbtCondition.FunctionValue({
            fct: function(pts) {
              return Array.prototype.slice.call(arguments);
            },
            params: points
          });
        },
      peg$c99 = function(str) {return str;},
      peg$c100 = function(nb) {return nb;},
      peg$c101 = function(b) {return b;},
      peg$c102 = "true",
      peg$c103 = peg$literalExpectation("true", true),
      peg$c104 = function() {return true;},
      peg$c105 = "false",
      peg$c106 = peg$literalExpectation("false", true),
      peg$c107 = function() {return false;},
      peg$c108 = "or",
      peg$c109 = peg$literalExpectation("OR", true),
      peg$c110 = "||",
      peg$c111 = peg$literalExpectation("||", false),
      peg$c112 = "and",
      peg$c113 = peg$literalExpectation("AND", true),
      peg$c114 = "&&",
      peg$c115 = peg$literalExpectation("&&", false),
      peg$c116 = "not",
      peg$c117 = peg$literalExpectation("NOT", true),
      peg$c118 = "!",
      peg$c119 = peg$literalExpectation("!", false),
      peg$c120 = "String",
      peg$c121 = peg$literalExpectation("String", false),
      peg$c122 = "Date",
      peg$c123 = peg$literalExpectation("Date", false),
      peg$c124 = "Geolib",
      peg$c125 = peg$literalExpectation("Geolib", false),
      peg$c126 = "Geopoint",
      peg$c127 = peg$literalExpectation("Geopoint", false),
      peg$c128 = "Polygone",
      peg$c129 = peg$literalExpectation("Polygone", false),
      peg$c130 = "Math",
      peg$c131 = peg$literalExpectation("Math", false),
      peg$c132 = "trigger",
      peg$c133 = peg$literalExpectation("trigger", true),
      peg$c134 = "min",
      peg$c135 = peg$literalExpectation("min", true),
      peg$c136 = "max",
      peg$c137 = peg$literalExpectation("max", true),
      peg$c138 = "mean",
      peg$c139 = peg$literalExpectation("mean", true),
      peg$c140 = "random",
      peg$c141 = peg$literalExpectation("random", true),
      peg$c142 = "ceil",
      peg$c143 = peg$literalExpectation("ceil", true),
      peg$c144 = "floor",
      peg$c145 = peg$literalExpectation("floor", true),
      peg$c146 = "abs",
      peg$c147 = peg$literalExpectation("abs", true),
      peg$c148 = "sqrt",
      peg$c149 = peg$literalExpectation("sqrt", true),
      peg$c150 = "pow",
      peg$c151 = peg$literalExpectation("pow", true),
      peg$c152 = "median",
      peg$c153 = peg$literalExpectation("median", true),
      peg$c154 = "sum",
      peg$c155 = peg$literalExpectation("sum", true),
      peg$c156 = "std",
      peg$c157 = peg$literalExpectation("std", true),
      peg$c158 = "startswith",
      peg$c159 = peg$literalExpectation("startswith", true),
      peg$c160 = "endswith",
      peg$c161 = peg$literalExpectation("endswith", true),
      peg$c162 = "concat",
      peg$c163 = peg$literalExpectation("concat", true),
      peg$c164 = "substring",
      peg$c165 = peg$literalExpectation("substring", true),
      peg$c166 = "includes",
      peg$c167 = peg$literalExpectation("includes", true),
      peg$c168 = "getdistance",
      peg$c169 = peg$literalExpectation("getdistance", true),
      peg$c170 = "ispointinside",
      peg$c171 = peg$literalExpectation("ispointinside", true),
      peg$c172 = "getcenter",
      peg$c173 = peg$literalExpectation("getcenter", true),
      peg$c174 = "ispointincircle",
      peg$c175 = peg$literalExpectation("ispointincircle", true),
      peg$c176 = "getpathlength",
      peg$c177 = peg$literalExpectation("getpathlength", true),
      peg$c178 = "ispointinline",
      peg$c179 = peg$literalExpectation("ispointinline", true),
      peg$c180 = "resource",
      peg$c181 = peg$literalExpectation("resource", true),
      peg$c182 = /^[a-zA-Z_]/,
      peg$c183 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false),
      peg$c184 = /^[0-9a-zA-Z_]/,
      peg$c185 = peg$classExpectation([["0", "9"], ["a", "z"], ["A", "Z"], "_"], false, false),
      peg$c186 = function(char, chars) { return char + chars.join(""); },
      peg$c187 = peg$otherExpectation("string"),
      peg$c188 = "\"",
      peg$c189 = peg$literalExpectation("\"", false),
      peg$c190 = function(chars) { return chars; },
      peg$c191 = function(value) {
            return String(value)
          },
      peg$c192 = function(chars) { return chars.join(""); },
      peg$c193 = /^[^"\\\0-\x1F\x7F]/,
      peg$c194 = peg$classExpectation(["\"", "\\", ["\0", "\x1F"], "\x7F"], true, false),
      peg$c195 = "\\\"",
      peg$c196 = peg$literalExpectation("\\\"", false),
      peg$c197 = function() { return '"';  },
      peg$c198 = "\\\\",
      peg$c199 = peg$literalExpectation("\\\\", false),
      peg$c200 = function() { return "\\"; },
      peg$c201 = "\\/",
      peg$c202 = peg$literalExpectation("\\/", false),
      peg$c203 = function() { return "/";  },
      peg$c204 = "\\b",
      peg$c205 = peg$literalExpectation("\\b", false),
      peg$c206 = function() { return "\b"; },
      peg$c207 = "\\f",
      peg$c208 = peg$literalExpectation("\\f", false),
      peg$c209 = function() { return "\f"; },
      peg$c210 = "\\n",
      peg$c211 = peg$literalExpectation("\\n", false),
      peg$c212 = function() { return "\n"; },
      peg$c213 = "\\r",
      peg$c214 = peg$literalExpectation("\\r", false),
      peg$c215 = function() { return "\r"; },
      peg$c216 = "\\t",
      peg$c217 = peg$literalExpectation("\\t", false),
      peg$c218 = function() { return "\t"; },
      peg$c219 = "\\u",
      peg$c220 = peg$literalExpectation("\\u", false),
      peg$c221 = function(digits) {
            return String.fromCharCode(parseInt(digits, 16));
          },
      peg$c222 = /^[0-9a-fA-F]/,
      peg$c223 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false),
      peg$c224 = function() {return true},
      peg$c225 = function(sign) {return parseFloat(text());},
      peg$c226 = function(sign, unsignedvalue) {
          if(sign) return -unsignedvalue;
          return unsignedvalue;
        },
      peg$c227 = /^[0-9]/,
      peg$c228 = peg$classExpectation([["0", "9"]], false, false),
      peg$c229 = function() {return parseInt(text());},
      peg$c230 = peg$otherExpectation("whitespace"),
      peg$c231 = /^[ \t\n\r]/,
      peg$c232 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseOrExpression();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseAdditive();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseOrExpression() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseAndExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseOR();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsews();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseOrExpression();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c2(s1, s5);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c3(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAndExpression() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseatom();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseAND();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsews();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseAndExpression();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c4(s1, s5);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseatom() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c6;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseOrExpression();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsews();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c8;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c9); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsews();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c10(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseNOT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseatom();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c11(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseComparison();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsews();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c12(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseComparisonOperator() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c13) {
      s1 = peg$c13;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c14); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c15();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c16) {
        s1 = peg$c16;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c18();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 62) {
          s1 = peg$c19;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c21();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c22) {
            s1 = peg$c22;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c24();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 60) {
              s1 = peg$c25;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c26); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c27();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c28) {
                s1 = peg$c28;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c29); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30();
              }
              s0 = s1;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseComparison() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseAdditive();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseComparisonOperator();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseAdditive();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c31(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAdditiveOperator() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 43) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c33); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c34();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c35;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c36); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c37();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseAdditive() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseMultiplicative();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsews();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseAdditiveOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsews();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseMultiplicative();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsews();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseAdditiveOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsews();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseMultiplicative();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c38(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMultiplicativeOperator() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 42) {
      s1 = peg$c39;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c40); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c41();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s1 = peg$c42;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c44();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c45) {
          s1 = peg$c45;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c46); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c47();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 37) {
            s1 = peg$c48;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c49); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c50();
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parseMultiplicative() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseNestedValue();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseMultiplicativeOperator();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseMultiplicative();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c31(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseNestedValue();
    }

    return s0;
  }

  function peg$parseNestedValue() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsevalue();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsekeys();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c51(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevalue() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseOPEN_PARENTHESE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseAdditive();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCLOSE_PARENTHESE();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c52(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseprimitive();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c53(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseconstructor();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c54(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseTRIGGER();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c55(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseresource();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c56(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsefct();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c57(s1);
              }
              s0 = s1;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsefct() {
    var s0;

    s0 = peg$parsestrfct();
    if (s0 === peg$FAILED) {
      s0 = peg$parsemathfct();
      if (s0 === peg$FAILED) {
        s0 = peg$parsegeofct();
      }
    }

    return s0;
  }

  function peg$parsestrfct() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseCONCAT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN_PARENTHESE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseParameterList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCLOSE_PARENTHESE();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c58(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSUBSTRING();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PARENTHESE();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseParameterList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PARENTHESE();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c59(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSTARTSWITH();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseOPEN_PARENTHESE();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseParameterList();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseCLOSE_PARENTHESE();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c60(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseENDSWITH();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseOPEN_PARENTHESE();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseParameterList();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseCLOSE_PARENTHESE();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c61(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseINCLUDES();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseOPEN_PARENTHESE();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseParameterList();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseCLOSE_PARENTHESE();
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c62(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsemathfct() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseMIN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN_PARENTHESE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseParameterList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCLOSE_PARENTHESE();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c63(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseMAX();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PARENTHESE();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseParameterList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PARENTHESE();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c64(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseMEAN();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseOPEN_PARENTHESE();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseParameterList();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseCLOSE_PARENTHESE();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c65(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseRANDOM();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseOPEN_PARENTHESE();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseCLOSE_PARENTHESE();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c66();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseCEIL();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseOPEN_PARENTHESE();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseParameter();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseCLOSE_PARENTHESE();
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c67(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseFLOOR();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseOPEN_PARENTHESE();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseParameter();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseCLOSE_PARENTHESE();
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c68(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseABS();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseOPEN_PARENTHESE();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseParameter();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseCLOSE_PARENTHESE();
                      if (s4 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c69(s3);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseSQRT();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseOPEN_PARENTHESE();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseParameter();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseCLOSE_PARENTHESE();
                        if (s4 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c70(s3);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsePOW();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseOPEN_PARENTHESE();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseParameterList();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseCLOSE_PARENTHESE();
                          if (s4 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c71(s3);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseMEDIAN();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseOPEN_PARENTHESE();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseParameterList();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parseCLOSE_PARENTHESE();
                            if (s4 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c72(s3);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseSUM();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseOPEN_PARENTHESE();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseParameterList();
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parseCLOSE_PARENTHESE();
                              if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c73(s3);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseSTD();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseOPEN_PARENTHESE();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseParameterList();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseCLOSE_PARENTHESE();
                                if (s4 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c74(s3);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsegeofct() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseGETDISTANCE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN_PARENTHESE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseParameterList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCLOSE_PARENTHESE();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c75(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseISPOINTINSIDE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PARENTHESE();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseParameterList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PARENTHESE();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c76(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseISPOINTINCIRCLE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseOPEN_PARENTHESE();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseParameterList();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseCLOSE_PARENTHESE();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c77(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseISPOINTINLINE();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseOPEN_PARENTHESE();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseParameterList();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseCLOSE_PARENTHESE();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c78(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseGETCENTER();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseOPEN_PARENTHESE();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseParameterList();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseCLOSE_PARENTHESE();
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c79(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseGETPATHLENGTH();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseOPEN_PARENTHESE();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseParameterList();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseCLOSE_PARENTHESE();
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c80(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseresource() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseSTNAME();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c81;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c82); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSTNAME();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c83(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseRESOURCE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PARENTHESE();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseParameter();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s4 = peg$c84;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c85); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseParameter();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCLOSE_PARENTHESE();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c86(s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsekeys() {
    var s0, s1;

    s0 = [];
    s1 = peg$parsekey();
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsekey();
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekey() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c81;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c82); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSTNAME();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c87(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParameterList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseParameter();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c84;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c85); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseParameter();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c88(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c84;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c85); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseParameter();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c88(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c89(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParameter() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseAdditive();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c90(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseconstructor() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsedate_constructor();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c91(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsegeopoint();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c92(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsepolygone();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c93(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parsedate_constructor() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseDATE();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c6;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseParameterList();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c8;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c9); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c94(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegeopoint() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseGEOPOINT();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseOPEN_PARENTHESE();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseParameter();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsews();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c84;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c85); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsews();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseParameter();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseCLOSE_PARENTHESE();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c95(s4, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseGEOPOINT();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOPEN_PARENTHESE();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseParameter();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCLOSE_PARENTHESE();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c96(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsepolygone() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePOLYGONE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseOPEN_PARENTHESE();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsegeopoint();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c84;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c85); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsegeopoint();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s9 = peg$c84;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c85); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsegeopoint();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s8;
                    s9 = peg$c97(s4, s6, s10);
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s9 = peg$c84;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c85); }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsegeopoint();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s8;
                        s9 = peg$c97(s4, s6, s10);
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  }
                } else {
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseCLOSE_PARENTHESE();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c98(s4, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseprimitive() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsestring();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c99(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsenumber();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c100(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsebool();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c101(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parsebool() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c102) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c103); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c104();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c105) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c106); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c107();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseOR() {
    var s0;

    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c108) {
      s0 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c109); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c110) {
        s0 = peg$c110;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c111); }
      }
    }

    return s0;
  }

  function peg$parseAND() {
    var s0;

    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c112) {
      s0 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c113); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c114) {
        s0 = peg$c114;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c115); }
      }
    }

    return s0;
  }

  function peg$parseNOT() {
    var s0;

    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c116) {
      s0 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c117); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 33) {
        s0 = peg$c118;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c119); }
      }
    }

    return s0;
  }

  function peg$parseOPEN_PARENTHESE() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 40) {
      s0 = peg$c6;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c7); }
    }

    return s0;
  }

  function peg$parseCLOSE_PARENTHESE() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 41) {
      s0 = peg$c8;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }

    return s0;
  }

  function peg$parseSTRING() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c120) {
      s0 = peg$c120;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c121); }
    }

    return s0;
  }

  function peg$parseDATE() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c122) {
      s0 = peg$c122;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c123); }
    }

    return s0;
  }

  function peg$parseGEOLIB() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c124) {
      s0 = peg$c124;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c125); }
    }

    return s0;
  }

  function peg$parseGEOPOINT() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c126) {
      s0 = peg$c126;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c127); }
    }

    return s0;
  }

  function peg$parsePOLYGONE() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c128) {
      s0 = peg$c128;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c129); }
    }

    return s0;
  }

  function peg$parseMATH() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c130) {
      s0 = peg$c130;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c131); }
    }

    return s0;
  }

  function peg$parseTRIGGER() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c132) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c133); }
    }

    return s0;
  }

  function peg$parseMIN() {
    var s0;

    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c134) {
      s0 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c135); }
    }

    return s0;
  }

  function peg$parseMAX() {
    var s0;

    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c136) {
      s0 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c137); }
    }

    return s0;
  }

  function peg$parseMEAN() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c138) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c139); }
    }

    return s0;
  }

  function peg$parseRANDOM() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c140) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c141); }
    }

    return s0;
  }

  function peg$parseCEIL() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c142) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c143); }
    }

    return s0;
  }

  function peg$parseFLOOR() {
    var s0;

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c144) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c145); }
    }

    return s0;
  }

  function peg$parseABS() {
    var s0;

    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c146) {
      s0 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c147); }
    }

    return s0;
  }

  function peg$parseSQRT() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c148) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c149); }
    }

    return s0;
  }

  function peg$parsePOW() {
    var s0;

    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c150) {
      s0 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c151); }
    }

    return s0;
  }

  function peg$parseMEDIAN() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c152) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c153); }
    }

    return s0;
  }

  function peg$parseSUM() {
    var s0;

    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c154) {
      s0 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c155); }
    }

    return s0;
  }

  function peg$parseSTD() {
    var s0;

    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c156) {
      s0 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c157); }
    }

    return s0;
  }

  function peg$parseSTARTSWITH() {
    var s0;

    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c158) {
      s0 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c159); }
    }

    return s0;
  }

  function peg$parseENDSWITH() {
    var s0;

    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c160) {
      s0 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c161); }
    }

    return s0;
  }

  function peg$parseCONCAT() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c162) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c163); }
    }

    return s0;
  }

  function peg$parseSUBSTRING() {
    var s0;

    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c164) {
      s0 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c165); }
    }

    return s0;
  }

  function peg$parseINCLUDES() {
    var s0;

    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c166) {
      s0 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c167); }
    }

    return s0;
  }

  function peg$parseGETDISTANCE() {
    var s0;

    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c168) {
      s0 = input.substr(peg$currPos, 11);
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c169); }
    }

    return s0;
  }

  function peg$parseISPOINTINSIDE() {
    var s0;

    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c170) {
      s0 = input.substr(peg$currPos, 13);
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c171); }
    }

    return s0;
  }

  function peg$parseGETCENTER() {
    var s0;

    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c172) {
      s0 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c173); }
    }

    return s0;
  }

  function peg$parseISPOINTINCIRCLE() {
    var s0;

    if (input.substr(peg$currPos, 15).toLowerCase() === peg$c174) {
      s0 = input.substr(peg$currPos, 15);
      peg$currPos += 15;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c175); }
    }

    return s0;
  }

  function peg$parseGETPATHLENGTH() {
    var s0;

    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c176) {
      s0 = input.substr(peg$currPos, 13);
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c177); }
    }

    return s0;
  }

  function peg$parseISPOINTINLINE() {
    var s0;

    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c178) {
      s0 = input.substr(peg$currPos, 13);
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c179); }
    }

    return s0;
  }

  function peg$parseRESOURCE() {
    var s0;

    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c180) {
      s0 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c181); }
    }

    return s0;
  }

  function peg$parseSTNAME() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$c182.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c183); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c184.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c185); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c184.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c185); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c186(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestring() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c188;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c189); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsechars();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c188;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c189); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c190(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSTRING();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN_PARENTHESE();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseprimitive();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE_PARENTHESE();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c191(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c187); }
    }

    return s0;
  }

  function peg$parsechars() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsechar();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsechar();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c192(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsechar() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    if (peg$c193.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c194); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c195) {
        s1 = peg$c195;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c196); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c197();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c198) {
          s1 = peg$c198;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c199); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c200();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c201) {
            s1 = peg$c201;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c202); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c203();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c204) {
              s1 = peg$c204;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c205); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c206();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c207) {
                s1 = peg$c207;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c208); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c209();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c210) {
                  s1 = peg$c210;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c211); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c212();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c213) {
                    s1 = peg$c213;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c214); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c215();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c216) {
                      s1 = peg$c216;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c217); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c218();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c219) {
                        s1 = peg$c219;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c220); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$currPos;
                        s3 = peg$currPos;
                        s4 = peg$parsehexDigit();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parsehexDigit();
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parsehexDigit();
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parsehexDigit();
                              if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7];
                                s3 = s4;
                              } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s3;
                              s3 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s3;
                          s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                          s2 = input.substring(s2, peg$currPos);
                        } else {
                          s2 = s3;
                        }
                        if (s2 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c221(s2);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsehexDigit() {
    var s0;

    if (peg$c222.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c223); }
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s2 = peg$c35;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s1;
      s2 = peg$c224();
    }
    s1 = s2;
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseINTEGER();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s5 = peg$c81;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c82); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseINTEGER();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c225(s1);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c226(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINTEGER() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c227.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c228); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c227.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c228); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c229();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsews() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c231.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c232); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$c231.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c232); }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c230); }
    }

    return s0;
  }


    var bbtCondition = require('./condition.js');
    var types = require('./types.js');
    var moment = require('moment');
    var Geolib = require('geolib');
    var mathjs = require('mathjs');


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
